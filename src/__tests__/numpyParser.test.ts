'use strict';

import { Blob } from "buffer";
import { fromArrayBuffer } from "../numpyParser";

describe('fromArrayBuffer()', () => {
	it('`int32` `C like` array test', async () => {
		var fileContentsEncodedInHex;
		fileContentsEncodedInHex = ["\x93\x4e\x55\x4d\x50\x59\x01\x00\x76\x00\x7b\x27\x64\x65\x73\x63\x72\x27\x3a\x20\x27\x3c\x69\x34\x27\x2c\x20\x27\x66\x6f\x72\x74\x72\x61\x6e\x5f\x6f\x72\x64\x65\x72\x27\x3a\x20\x46\x61\x6c\x73\x65\x2c\x20\x27\x73\x68\x61\x70\x65\x27\x3a\x20\x28\x31\x30\x2c\x29\x2c\x20\x7d\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\x09\x00\x00\x00"];
		const ab = new Blob(fileContentsEncodedInHex).arrayBuffer();
		ab.then(value => {
			const {data : array} = fromArrayBuffer(new Uint8Array(value));
			expect(array).toBe(new Int32Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]));
		})
	});
});
